package gov.nih.ncats.smrtgraph4j.structure;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.OptionBuilder;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;

public class Cmpd2ScaffFromSNG {

    
    private Map<Integer, Scaffold> scaffolds = null;
    private Map<Integer, Compound> compounds = null;
    private static final String NEWLINE = System.getProperty("line.separator");
    
    
    private String scaffoldNetworkFileName = null;
    private String compound2MaxScaffoldfFileName = null;
    private String outputFileName = null;

    
    public Cmpd2ScaffFromSNG () {
        scaffolds = new HashMap<Integer, Scaffold> ();
        compounds = new HashMap<Integer, Compound> ();

    }
    
    public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub

        
        Cmpd2ScaffFromSNG cmpd2ScaffFromSNG = new Cmpd2ScaffFromSNG ();
        
        CommandLineParser parser = new PosixParser();
        Options sw = new Options();
        sw.addOption(OptionBuilder.withLongOpt("scaffoldnetwork")
                .withArgName("file name")
                .hasArg(true)
                .withDescription("Name of file containing scaffold network generated by Swamidass' Scaffold Network Generator (commit d7122cd).")
                .isRequired(true)
                .create("s"));  
        sw.addOption(OptionBuilder.withLongOpt("cmpd2maxscaff")
                .withArgName("file name")
                .hasArg(true)
                .withDescription("Name of file containing compound to maximal scaffold associations generated by"
                        + " Swamidass' Scaffold Network Generator (commit d7122cd).")
                .isRequired(true)
                .create("c"));        
        sw.addOption(OptionBuilder.withLongOpt("output")
                .withArgName("file name")
                .hasArg(true)
                // ref: http://www.postgresql.org/docs/9.1/static/runtime-config-connection.html
                .withDescription("Name of output file containing *ALL* compound to scaffold associations. Format: TAB separated.")
                .isRequired(true)
                .create("o"));  
                

        // Ref: http://www.thinkplexx.com/blog/simple-apache-commons-cli-example-java-command-line-arguments-parsing
        sw.addOption("h", "help", false, "display options");
        HelpFormatter helpFormater = new HelpFormatter();

        try {
            CommandLine cli = parser.parse(sw, args);

            cmpd2ScaffFromSNG.setScaffoldNetworkFileName(cli.getOptionValue("s"));
            cmpd2ScaffFromSNG.setCompound2MaxScaffoldfFileName(cli.getOptionValue("c"));
            cmpd2ScaffFromSNG.setOutputFileName(cli.getOptionValue("o"));
            
            
            cmpd2ScaffFromSNG.parseScaffolds ();
            cmpd2ScaffFromSNG.parseCmpd2MaxScaff ();
            cmpd2ScaffFromSNG.associateCompoundsToScaffolds ();
            cmpd2ScaffFromSNG.writeCid2SID ();
            
             
            
        } catch(ParseException ex) {
            System.err.println(ex.getMessage());
            helpFormater.printHelp("java -cp chmutils-0.0.1-SNAPSHOT.jar gov.nih.ncats.sdftools.Cmpd2ScaffFromSNG", sw);
            return;
        }   
  
 
        
        
    }
    
    

    void parseScaffolds () throws IOException {
        String line = null;
        
        String tmp[] = null;
        
        
        Scaffold scaffold = null;
        int sid = -1;
        String subSIDs[] = null;
        
        BufferedReader br =  new BufferedReader (new FileReader (getScaffoldNetworkFileName()));
        
        while (null != (line = br.readLine())) {
            if (!line.startsWith("ID")) {
                line = line.trim();
                
                tmp = line.split("\t");
                
                sid = Integer.parseInt(tmp[0].trim());
    
                if (scaffolds.containsKey(sid)) {
                    scaffold = scaffolds.get(sid);
                }
                else {
                    scaffold = new Scaffold (sid);
                    scaffolds.put(sid, scaffold);
                }
            }
            else {
                continue;
            }
            
            
            // It is OK add subscaffolds without checking for presence as they're stored in a set.
            if (tmp.length > 3) {
                
                
                scaffold.setHasSubScaffold(true);
                subSIDs = tmp[3].trim().split(",");
                
                // There's a trailing comma at the end of each non-null field associated with subscaffolds, 
                // seems fine to itareta all the way through the split array. Iterating to the second to last element
                // would leave out one scaffold id. -- GZK 04/17/2017
                for (int i = 0; i < subSIDs.length; i++) {
                    
                    scaffold.addSubScaffold(Integer.parseInt(subSIDs[i]));
                }
                
                
            }
            
        }
        
        
        br.close();
        
    }
    
    
    

    void parseCmpd2MaxScaff () throws IOException {
        String line = null;
        
        String tmp[] = null;
        
        
        Compound compound = null;
        int cid = -1;
        int sid = -2;
        
        BufferedReader br =  new BufferedReader (new FileReader (getCompound2MaxScaffoldfFileName()));
        
        while (null != (line = br.readLine())) {
            if (!line.startsWith("MOLECULE_ID")) {
                line = line.trim();
                
                tmp = line.split("\t");
                
                cid = Integer.parseInt(tmp[0].trim());
    
                if (compounds.containsKey(cid)) {
                    compound = compounds.get(cid);
                }
                else {
                    compound = new Compound (cid);
                    compounds.put(cid, compound);
                }
            }
            else {
                continue;
            }

            sid = Integer.parseInt(tmp[1].trim());
            
            if (!scaffolds.containsKey(sid)) {
                System.err.println("[ERROR] Compound (cid: " + cid  + ") is associated with maximal scaffold (sid: " + sid + " that"
                        + " is not listed in file " + getScaffoldNetworkFileName() + " . Terminating...");
                throw new IllegalStateException();
            }
            
            
            // This method (compound.setMaximalScaffold) also adds the ID of the maximal scaffold to the set of associatedScaffolds.
            // GZK 04/17/2017
            compound.setMaximalScaffold(scaffolds.get(sid));
            
        }
        
        
        br.close();
        
    }
 
    
    public void associateCompoundsToScaffolds () {
        
        Compound compound = null;
        Scaffold scaffold = null;
        
        Iterator<Integer> ciT = compounds.keySet().iterator();
        Iterator<Integer> siT = null;
        
        while (ciT.hasNext()) {
            
            compound = compounds.get(ciT.next());
            scaffold = compound.getMaximalScaffold();
            
           
            if (scaffold.hasSubScaffold()) {
                
                siT = scaffold.getSubScaffoldIterator();
                
                while (siT.hasNext()) {
                    compound.addScaffold(siT.next());
                }
            }
        }
        
    }

    
    public void writeCid2SID  () throws IOException {
        
        BufferedWriter bw = new BufferedWriter (new FileWriter(getOutputFileName()));
        
        Iterator<Integer> ciT = compounds.keySet().iterator();
        
        Compound compound = null; 
        
        Iterator<Integer> siT = null;
        
        int sid = -1;
        
        bw.write("#CompoundID\tScaffoldID\tisMaximalScaffoldOfCompound" + NEWLINE);
        
        while (ciT.hasNext()) {
            compound = compounds.get(ciT.next());
        
            siT = compound.getAssociatedScaffoldsIterator();
            
            while (siT.hasNext()) {
                
                sid = siT.next();
                
                bw.write(compound.getID() + "\t");
                
                if (compound.getMaximalScaffoldID() == sid) {
                    bw.write(sid + "\ttrue" + NEWLINE);
                }
                else {
                    bw.write(sid + "\tfalse" + NEWLINE);
                }
                
                
            }
        
        }
        
        
        bw.close();
        
    }
    
    
    
    
    
    public String getScaffoldNetworkFileName() {
        return scaffoldNetworkFileName;
    }

    public void setScaffoldNetworkFileName(String scaffoldNetworkFileName) {
        this.scaffoldNetworkFileName = scaffoldNetworkFileName;
    }

    public String getCompound2MaxScaffoldfFileName() {
        return compound2MaxScaffoldfFileName;
    }

    public void setCompound2MaxScaffoldfFileName(String compound2MaxScaffoldfFileName) {
        this.compound2MaxScaffoldfFileName = compound2MaxScaffoldfFileName;
    }

    public String getOutputFileName() {
        return outputFileName;
    }

    public void setOutputFileName(String outputFileName) {
        this.outputFileName = outputFileName;
    }

    
    
    // Ref: https://docs.oracle.com/javase/tutorial/java/javaOO/innerclasses.html
    private class Scaffold {
        
        private Integer sid = -1;
        
        private Set<Integer> subScaffolds = null;
 
        private boolean subScaffold = false;
        
        
        private Scaffold (int id) {
            this.sid = id;
            subScaffolds = new LinkedHashSet ();
        }
        
        private void addSubScaffold (int id) {
            this.subScaffolds.add(id);
        }
        
        private Iterator<Integer> getSubScaffoldIterator () {
            return subScaffolds.iterator();
        }
        
        private int getID () {
            return sid;
        }
        
        private void setHasSubScaffold (boolean b) {
            this.subScaffold = b;
        }
        
        private boolean hasSubScaffold () {
            return subScaffold;
        }
        
        
    }
    
    // Ref: https://docs.oracle.com/javase/tutorial/java/javaOO/innerclasses.html
    private class Compound {
        
        private int cid = -1;
        
        Scaffold maximalScaffold = null;
        
        private Set<Integer> associatedScaffolds = null;
        
        private Compound (int id) {
            this.cid = id;
            associatedScaffolds = new LinkedHashSet ();
        }
        
        private void setMaximalScaffold (Scaffold s) {
            this.maximalScaffold = s;
            this.associatedScaffolds.add(s.getID());
        }
        
        private Scaffold getMaximalScaffold () {
            return maximalScaffold;
        }
        
        private void addScaffold (int id) {
            this.associatedScaffolds.add(id);
        }
        
        private Iterator<Integer> getAssociatedScaffoldsIterator () {
            return associatedScaffolds.iterator();
        }
        
        private int getID () {
            return cid;
        }
        
        private int getMaximalScaffoldID () {
            return maximalScaffold.getID();
        }
        
    }
    
    
}
